#!/bin/bash

# Slackware build script for wezterm

# Copyright 2022 Julian Grinblat <julian@dotcore.co.il>
# Copyright 2025 Vijay Marcel
# All rights reserved.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

cd $(dirname $0) ; CWD=$(pwd)

PRGNAM=wezterm
VERSION=${VERSION:-0.23.3}
BUILD=${BUILD:-1}
TAG=${TAG:-_SBo}
PKGTYPE=${PKGTYPE:-tgz}
nprocr=$(expr $(nproc))
sys_arch=${sys_arch:-$(uname -m)}

case "$sys_arch" in
   	x86_64) export ARCH=x86_64 ;;
	     *) echo "This SlackBuild will not run on $sys_arch platform" && exit 1 ;;
esac

if [ ! -z "${PRINT_PACKAGE_NAME}" ]; then
  echo "$PRGNAM-$VERSION-$ARCH-$BUILD$TAG.$PKGTYPE"
  exit 0
fi

TMP=${TMP:-/tmp/SBo}
PKG=$TMP/package-$PRGNAM
OUTPUT=${OUTPUT:-/tmp}

if [ "$ARCH" = "x86_64" ]; then
  LIBDIRSUFFIX="64"
  ARCHFLAGS="-march=x86-64 -mtune=native -pipe -ffunction-sections -fdata-sections -O2 -fPIC"
  PFLAGS="-fno-delete-null-pointer-checks -Wno-incompatible-pointer-types"
  PXXFLAGS="-fno-delete-null-pointer-checks"
  GCFLAGS="-Wl,--sort-common=ascending -Wl,--sort-section=alignment -Wl,--gc-sections -Wl,-z,unique-symbol"
  SLKCFLAGS="$ARCHFLAGS $PFLAGS"
  SLKCXXFLAGS="$ARCHFLAGS $PXXFLAGS"
  SLDFLAGS="$GCFLAGS"
else  echo "this slackbuild will work only on $ARCH" && exit 1
fi

export CC=${CC:-gcc}
export CXX=${CXX:-g++}
export CFLAGS="$SLKCFLAGS"
export CXXFLAGS="$SLKCXXFLAGS"
export LDFLAGS="$SLDFLAGS"

export m=/opt/meson/bin # meson path
export r=/opt/rust/bin # rust path
export rl=/opt/rust/lib64

PYVER=$(python3 -c 'import sys; print("%d.%d" % sys.version_info[:2])')
export PYTHONPATH=/opt/python$PYVER/site-packages
export PATH=$m:$r:$PATH
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$rl

set -e
trap 'echo "$0 FAILED at line $LINENO!" | tee -a $OUTPUT/error-${PRGNAM}.log' ERR

rm -rf $PKG
mkdir -p $TMP $PKG $OUTPUT
cd $TMP
rm -rf $PRGNAM-$VERSION
tar xvf $CWD/termwiz-0.23.3.tar.gz
mv wezterm-termwiz-0.23.3 $PRGNAM-$VERSION
cd $PRGNAM-$VERSION
tar xvf $CWD/harfbuzz-8.3.0.tar.gz -C deps/harfbuzz/harfbuzz --strip-components=1
tar xvf $CWD/zlib-1.2.11.tar.gz -C deps/freetype/zlib --strip-components=1
tar xvf $CWD/libpng-8439534daa1d3a5705ba92e653eda9251246dd61.tar.gz -C deps/freetype/libpng --strip-components=1
tar xvf $CWD/freetype2-e4586d960f339cf75e2e0b34aee30a0ed8353c0d.tar.gz -C deps/freetype/freetype2 --strip-components=1
mkdir xcb-imdkit-rs-215ce4b08ac9c482
tar xvf $CWD/xcb-imdkit-rs-215ce4b08ac9c4822e541efd4f4ffb1062806051.tar.gz -C xcb-imdkit-rs-215ce4b08ac9c482 --strip-components=1
touch xcb-imdkit-rs-215ce4b08ac9c482/.cargo-ok

tar xvf $CWD/xcb-imdkit-30e2f16f9a8b0e338e25ce5e3643809a07ad41f0.tar.gz -C xcb-imdkit-rs-215ce4b08ac9c482/deps/xcb-imdkit --strip-components=1

chown -R root:root .
find -L . \
 \( -perm 777 -o -perm 775 -o -perm 750 -o -perm 711 -o -perm 555 \
  -o -perm 511 \) -exec chmod 755 {} \+ -o \
 \( -perm 666 -o -perm 664 -o -perm 640 -o -perm 600 -o -perm 444 \
  -o -perm 440 -o -perm 400 \) -exec chmod 644 {} \+

# Target Architecture
TARGET="$(rustc -vV | sed -n 's/host: //p')"

# set cargo_home dir in the build dir were the crates will be downloaded otherwise it will be downloaded in
# root's home
mkdir -pv ".cargo"
export CARGO_HOME=".cargo"

cargo fetch --verbose --color auto --manifest-path=$TMP/$PRGNAM-$VERSION/Cargo.toml --target=$TARGET
cargo build --frozen --manifest-path=$TMP/$PRGNAM-$VERSION/Cargo.toml --release

mkdir -p $PKG/usr/bin/
find target -name $PRGNAM -exec install -m 755 {} $PKG/usr/bin/$PRGNAM \;
find target -name $PRGNAM-gui -exec install -m 755 {} $PKG/usr/bin/$PRGNAM-gui \;
find target -name $PRGNAM-mux-server -exec install -m 755 {} $PKG/usr/bin/$PRGNAM-mux-server \;
find target -name strip-ansi-escapes -exec install -m 755 {} $PKG/usr/bin/strip-ansi-escapes \;

install -Dm 644 assets/icon/terminal.png $PKG/usr/share/icons/hicolor/128x128/apps/org.wezfurlong.$PRGNAM.png
install -Dm 644 assets/$PRGNAM.desktop $PKG/usr/share/applications/org.wezfurlong.$PRGNAM.desktop
install -Dm 644 assets/$PRGNAM.appdata.xml $PKG/usr/share/metainfo/org.wezfurlong.$PRGNAM.appdata.xml
install -Dm 644 assets/$PRGNAM-nautilus.py $PKG/usr/share/nautilus-python/extensions/$PRGNAM-nautilus.py
install -Dm 755 assets/open-$PRGNAM-here -t $PKG/usr/bin
install -Dm 644 assets/shell-completion/bash $PKG/usr/share/bash-completion/completions/$PRGNAM
install -Dm 644 assets/shell-completion/fish $PKG/usr/share/fish/vendor_completions.d/$PRGNAM.fish
install -Dm 644 assets/shell-completion/zsh $PKG/usr/share/zsh/site-functions/_$PRGNAM

install -Dm 644 assets/shell-integration/* -t $PKG/etc/profile.d

mkdir -p $PKG/usr/share/terminfo
tic -x -o $PKG/usr/share/terminfo termwiz/data/$PRGNAM.terminfo

# Cleanup CARGO_HOME and possible unnecessary artifacts in $PKG.
rm -rf "$CARGO_HOME" "$PKG/usr/.cargo" "$PKG/usr/.crates*"

find $PKG -print0 | xargs -0 file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded --remove-section=.comment --remove-section=.note 2> /dev/null || true

mkdir -p $PKG/usr/doc/$PRGNAM-$VERSION
cp -a README.md LICENSE.md CONTRIBUTING.md $PKG/usr/doc/$PRGNAM-$VERSION
cat $CWD/$PRGNAM.SlackBuild > $PKG/usr/doc/$PRGNAM-$VERSION/$PRGNAM.SlackBuild

mkdir -p $PKG/install
cat $CWD/slack-desc > $PKG/install/slack-desc
cat $CWD/doinst.sh > $PKG/install/doinst.sh

cd $PKG
/sbin/makepkg -l y -c n $OUTPUT/$PRGNAM-$VERSION-$ARCH-$BUILD$TAG.$PKGTYPE
